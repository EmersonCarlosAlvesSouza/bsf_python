from collections import deque


graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D'],
    'C': ['A', 'F'],
    'D': ['B', 'E'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}



def bfs(graph, comeco, destino):
    
    '1-Um conjunto é criado para armazenar os vértices visitados'
    visitado = set()
    
    'e uma fila (deque) é criada com uma tupla contendo o vértice de partida e o caminho atualizado. O caminho inicial contém apenas o vértice de partida.'
    fila = deque([(comeco, [comeco])])
    
    '2-Enquanto a fila não estiver vazia, o nó mais antigo é removido da fila.'
    while fila:
        (no, caminho) = fila.popleft()
        
        '3-Se o nó removido ainda não tiver sido visitado, ele é adicionado ao conjunto de visitados.'
        if no not in visitado:
            visitado.add(no)
            
            '4-Se o nó removido for o nó de destino, o caminho atualizado é retornado.'
            if no == destino:
                return caminho
                
            '5-Caso contrário, para cada vizinho do nó removido, se o vizinho ainda não tiver sido visitado, ele é adicionado à fila juntamente com o caminho atualizado.'    
            for vizinho in graph[no]:
                if vizinho not in visitado:
                    fila.append((vizinho, caminho + [vizinho]))

                    
caminho = bfs(graph, 'A', 'F')
print(caminho)


